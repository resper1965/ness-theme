services:
  # Gabi Chat (Frontend Next.js)
  gabi-chat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gabi-chat
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    networks:
      - gabi-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Gabi OS (Backend Python com Agno SDK)
  gabi-os:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gabi-os
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=${DATABASE_URL}
      - AGNO_API_KEY=${AGNO_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    ports:
      - "8000:8000"
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - gabi-network
    depends_on:
      - supabase-db
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  supabase-db:
    image: postgres:15-alpine
    container_name: gabi-supabase-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-gabi}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
      - ./scripts/supabase-init.sql:/docker-entrypoint-initdb.d/supabase-init.sql
    networks:
      - gabi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-gabi}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Supabase Studio (Interface Web)
  supabase-studio:
    image: supabase/studio:latest
    container_name: gabi-supabase-studio
    restart: unless-stopped
    environment:
      - SUPABASE_URL=http://localhost:5432
      - SUPABASE_REST_URL=http://localhost:5432/rest/v1/
      - SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
      - SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
    ports:
      - "3001:3000"
    networks:
      - gabi-network
    depends_on:
      - supabase-db

  # Redis para cache e sess√µes
  redis:
    image: redis:7.4-alpine
    container_name: gabi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gabi-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:1.27-alpine
    container_name: gabi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/nginx/ssl:/etc/nginx/ssl
    networks:
      - gabi-network
    depends_on:
      - gabi-chat
      - gabi-os
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  supabase_db_data:
  redis_data:

networks:
  gabi-network:
    driver: bridge
    name: gabi-network
