#!/usr/bin/env node

/**
 * Script para verificar atualiza√ß√µes do BMAD Method
 * Executado automaticamente ap√≥s clonar o reposit√≥rio
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const BMAD_DIR = path.join(__dirname, '..', 'bmad');
const BMAD_REPO = 'https://github.com/bmad-method/bmad-method.git';
const BMAD_VERSION_FILE = path.join(BMAD_DIR, '.bmad-version');

console.log('üîç Verificando atualiza√ß√µes do BMAD Method...\n');

// Verifica se o diret√≥rio bmad existe
if (!fs.existsSync(BMAD_DIR)) {
  console.log('‚ö†Ô∏è  Diret√≥rio bmad n√£o encontrado.');
  console.log('üì¶ O BMAD ser√° baixado durante o setup.\n');
  process.exit(0);
}

// L√™ vers√£o atual se existir
let currentVersion = 'unknown';
if (fs.existsSync(BMAD_VERSION_FILE)) {
  try {
    currentVersion = fs.readFileSync(BMAD_VERSION_FILE, 'utf8').trim();
    console.log(`üìå Vers√£o atual instalada: ${currentVersion}`);
  } catch (error) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel ler vers√£o atual.');
  }
}

// Verifica se √© um reposit√≥rio git
const isGitRepo = fs.existsSync(path.join(BMAD_DIR, '.git'));

if (!isGitRepo) {
  console.log('‚ö†Ô∏è  BMAD n√£o √© um reposit√≥rio git. N√£o √© poss√≠vel verificar atualiza√ß√µes.\n');
  console.log('üí° Para habilitar verifica√ß√µes de atualiza√ß√£o, o BMAD precisa ser um clone git.\n');
  process.exit(0);
}

try {
  // Busca informa√ß√µes do reposit√≥rio remoto
  console.log('üåê Verificando reposit√≥rio remoto...');
  
  // Verifica se tem remote configurado
  try {
    const remoteUrl = execSync('git remote get-url origin', {
      cwd: BMAD_DIR,
      encoding: 'utf8',
      stdio: 'pipe'
    }).trim();
    
    console.log(`üìç Remote: ${remoteUrl}`);
    
    // Busca √∫ltima vers√£o dispon√≠vel
    console.log('üîÑ Buscando atualiza√ß√µes...');
    execSync('git fetch origin', {
      cwd: BMAD_DIR,
      stdio: 'inherit'
    });
    
    // Verifica commits √† frente
    const status = execSync('git status -sb', {
      cwd: BMAD_DIR,
      encoding: 'utf8'
    });
    
    if (status.includes('behind')) {
      const behindCount = status.match(/behind (\d+)/)?.[1] || '0';
      console.log(`\n‚ú® H√° ${behindCount} atualiza√ß√£o(√µes) dispon√≠vel(is) para o BMAD Method!`);
      console.log('\nüìù Para atualizar, execute:');
      console.log('   npm run bmad:update\n');
      console.log('   ou manualmente:');
      console.log('   cd bmad && git pull origin main\n');
    } else {
      console.log('\n‚úÖ BMAD Method est√° atualizado!\n');
    }
    
    // Atualiza arquivo de vers√£o
    try {
      const latestCommit = execSync('git rev-parse HEAD', {
        cwd: BMAD_DIR,
        encoding: 'utf8'
      }).trim();
      
      const shortCommit = latestCommit.substring(0, 7);
      fs.writeFileSync(BMAD_VERSION_FILE, latestCommit);
      console.log(`üìå Vers√£o atual: ${shortCommit}\n`);
    } catch (error) {
      // Ignora erro de vers√£o
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar atualiza√ß√µes automaticamente.');
    console.log('üí° Certifique-se de que o diret√≥rio bmad √© um reposit√≥rio git v√°lido.\n');
  }
  
} catch (error) {
  console.log('‚ö†Ô∏è  Erro ao verificar atualiza√ß√µes:', error.message);
  console.log('üí° Continue normalmente. O BMAD atual continuar√° funcionando.\n');
}

