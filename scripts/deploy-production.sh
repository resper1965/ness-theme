#!/bin/bash

# Gabi Production Deployment Script
# Configurado para usar Traefik com SSL autom√°tico

set -e

echo "üöÄ Iniciando deploy do Gabi em produ√ß√£o..."

# Verificar se o arquivo .env existe
if [ ! -f ".env" ]; then
    echo "‚ùå Arquivo .env n√£o encontrado!"
    echo "üìù Copiando env.production para .env..."
    cp env.production .env
    echo "‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes antes de continuar!"
    echo "   - DOMAIN: seu dom√≠nio (ex: gabi.exemplo.com)"
    echo "   - AGNO_API_KEY: sua chave da API Agno"
    echo "   - OPENAI_API_KEY: sua chave da API OpenAI"
    echo "   - SECRET_KEY: chave secreta para produ√ß√£o"
    echo ""
    read -p "Pressione Enter ap√≥s editar o .env..."
fi

# Carregar vari√°veis de ambiente
source .env

# Verificar vari√°veis obrigat√≥rias
if [ -z "$DOMAIN" ]; then
    echo "‚ùå DOMAIN n√£o definido no .env!"
    exit 1
fi

if [ -z "$AGNO_API_KEY" ] || [ "$AGNO_API_KEY" = "your_agno_api_key_here" ]; then
    echo "‚ùå AGNO_API_KEY n√£o configurado no .env!"
    exit 1
fi

if [ -z "$OPENAI_API_KEY" ] || [ "$OPENAI_API_KEY" = "your_openai_api_key_here" ]; then
    echo "‚ùå OPENAI_API_KEY n√£o configurado no .env!"
    exit 1
fi

if [ -z "$SECRET_KEY" ] || [ "$SECRET_KEY" = "your_production_secret_key_here" ]; then
    echo "‚ùå SECRET_KEY n√£o configurado no .env!"
    exit 1
fi

echo "‚úÖ Vari√°veis de ambiente verificadas"

# Verificar se Traefik est√° rodando
if ! docker network ls | grep -q traefik; then
    echo "‚ùå Rede Traefik n√£o encontrada!"
    echo "üìù Certifique-se de que o Traefik est√° rodando com Portainer"
    exit 1
fi

echo "‚úÖ Traefik detectado"

# Parar containers existentes
echo "üõë Parando containers existentes..."
docker-compose -f docker-compose.production.yml down || true

# Construir imagens
echo "üî® Construindo imagens..."
docker-compose -f docker-compose.production.yml build --no-cache

# Iniciar servi√ßos
echo "üöÄ Iniciando servi√ßos..."
docker-compose -f docker-compose.production.yml up -d

# Aguardar servi√ßos ficarem prontos
echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
sleep 30

# Verificar sa√∫de dos servi√ßos
echo "üîç Verificando sa√∫de dos servi√ßos..."

# Verificar frontend
if curl -f -s "https://$DOMAIN" > /dev/null; then
    echo "‚úÖ Frontend: https://$DOMAIN"
else
    echo "‚ùå Frontend n√£o est√° respondendo"
fi

# Verificar backend
if curl -f -s "https://$DOMAIN/api/health" > /dev/null; then
    echo "‚úÖ Backend: https://$DOMAIN/api/health"
else
    echo "‚ùå Backend n√£o est√° respondendo"
fi

# Verificar Supabase Studio
if curl -f -s "https://studio.$DOMAIN" > /dev/null; then
    echo "‚úÖ Supabase Studio: https://studio.$DOMAIN"
else
    echo "‚ùå Supabase Studio n√£o est√° respondendo"
fi

echo ""
echo "üéâ Deploy conclu√≠do!"
echo ""
echo "üìã URLs de acesso:"
echo "   - Frontend: https://$DOMAIN"
echo "   - Backend API: https://$DOMAIN/api"
echo "   - Supabase Studio: https://studio.$DOMAIN"
echo "   - API Docs: https://$DOMAIN/api/docs"
echo ""
echo "üîß Comandos √∫teis:"
echo "   - Ver logs: docker-compose -f docker-compose.production.yml logs -f"
echo "   - Parar: docker-compose -f docker-compose.production.yml down"
echo "   - Restart: docker-compose -f docker-compose.production.yml restart"
echo ""
